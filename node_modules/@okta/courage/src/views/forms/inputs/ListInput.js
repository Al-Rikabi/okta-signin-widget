/* eslint max-params: [2, 8] */
define([
  'underscore',
  'shared/util/StringUtil',
  '../BaseInput',
  'shared/views/BaseView',
  'shared/models/BaseCollection',
  'shared/models/BaseModel',
  'shared/util/ButtonFactory',
  'shared/views/Backbone.ListView'
], function (_, StringUtil, BaseInput, BaseView, BaseCollection, BaseModel, ButtonFactory, ListView) {


  var Collection = BaseCollection.extend({
    model: BaseModel
  });

  function hideOnReadMode() {
    this.$el.hide();
  }

  function getInputNames(options, res) {
    if (options.params.inputs[0].type == 'group') {
      return getInputNames(options.params.inputs[0]);
    }
    return _.compact(_.pluck(options.params.inputs, 'name'));
  }

  function getEmptyValue(options) {
    var defaultValues = options.model.pick('__edit__') || {};
    var names = getInputNames(options);
    _.extend(defaultValues, _.object(names, _.map(names, _.constant(''))));
    return defaultValues;
  }

  var AddAnotherButton = ButtonFactory.create({
    title: function () {
      return this.params.addLabel || StringUtil.localize('oform.add.another');
    },
    icon: 'add-16',
    readMode: hideOnReadMode,
    click: function () {
      this.collection.trigger('list:add');
    }
  });

  var RemoveItemButton = BaseView.extend({
    tagName: 'td',
    className: 'list-input-cell button',
    children: [ButtonFactory.create({
      icon: 'cancel-16',
      readMode: hideOnReadMode,
      click: function () {
        this.model.trigger('list:remove', this.model);
      }
    })]
  });

  var ItemView = BaseView.extend({
    className: function () {
      return 'list-input-row list-input-items-' + _.size(this.options.params.inputs);
    },

    tagName: 'tr',

    children: function () {

      return _.map(this.options.params.inputs, function (input) {
        var params = this.options.params;
        return BaseView.extend({
          tagName: 'td',
          className: 'list-input-cell o-form-wide',
          children: [params.create(_.defaults({
            model: this.model,
            params: _.defaults({wide: true}, params)
          }, input))],
          focus: function () {
            this.size() && this.first().focus();
          }
        });
      }, this).concat([RemoveItemButton]);
    },

    focus: function () {
      this.first().focus();
    }
  });


  var InputListView = ListView.extend({


    tagName: 'table',

    template: '\
      <tfoot>\
        <tr><td class="list-input-cell"></td></tr>\
      </tfoot>\
      <tbody>\
      {{#if labels}}\
        <tr>\
          {{#each labels}}\
            <th>{{this}}</th>\
          {{/each}}\
          <th></th>\
        </tr>\
      {{/if}}\
      </tbody>\
    ',

    item: ItemView,

    itemSelector: 'tbody',

    getTemplateData: function () {
      var labels = _.values(_.pluck(this.options.params.inputs, 'label'));
      return {
        labels: _.some(labels) && labels,
        numLabels: labels.length
      };
    },

    collectionEvents: function () {
      return {
        'list:remove': 'removeColectionItem',
        'list:add': 'addCollectionItem',
        'add remove reset': _.debounce(this.focus, 20)
      };
    },

    removeColectionItem: function (model) {
      model.destroy();
      if (!this.collection.length) {
        this.addCollectionItem();
      }
      this.model.trigger('form:resize');
    },

    children: [
      [AddAnotherButton, 'tfoot td']
    ],

    addCollectionItem: function () {
      this.collection.add(getEmptyValue(this.options));
      this.model.trigger('form:resize');
    },

    focus: function () {
      this.size() > 1 && this.last().focus();
    }
  });

  return BaseInput.extend({

    tagName: 'div',
    className: 'o-form-list-input',

    render: function () {
      var values = this.getModelValue();
      if (!values || !values.length) {
        values = [getEmptyValue(this.options)];
      }
      this.collection = this.options.collection = new Collection(values);

      this.listenTo(this.collection, 'add remove reset update change', _.debounce(this.update, 20));

      this.listView = new InputListView(_.extend({
        collection: this.collection
      }, this.options));
      this.$el.html(this.listView.render().el);

      this.listenTo(this.model, 'change:__edit__', function (model, edit) {
        this.collection.each(function (model) {
          model.set('__edit__', edit);
        });
      });

      return BaseInput.prototype.render.apply(this, arguments);
    },

    editMode: function () {
      this.listView.invoke('editMode');
    },

    readMode: function () {
      this.editMode();
      this.listView.invoke('readMode');
    },

    val: function () {
      return this.collection.map(function (model) {
        return _.omit(model.toJSON({verbose: true}), '__edit__');
      });
    },

    focus: function () {
      this.listView && this.listView.focus();
    }
  },
    { // test hooks
      ItemView: ItemView,
      InputListView: InputListView,
      AddAnotherButton: AddAnotherButton,
      RemoveItemButton: RemoveItemButton
    });

});
