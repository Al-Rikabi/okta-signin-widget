/* eslint max-params: 0 */
define([
  'shared/util/TemplateUtil',
  'shared/models/BaseCollection',
  'shared/models/BaseModel',
  'shared/util/UrlExpander',
  'shared/util/UserStatus',
  'shared/util/Util'
], function (TemplateUtil, BaseCollection, BaseModel, UrlExpander, UserStatus, Util) {

  var url = TemplateUtil.tpl('/api/v1/apps/{{instanceId}}/users{{{urlQuery}}}');

  // TODO: convert Okta.BaseModel to Okta.Model OKTA-65258
  var AppUser = BaseModel.extend({

    defaults: {
      credentials: {},
      userName: BaseModel.ComputedProperty(['credentials'], function (credentials) {
        try {
          return credentials.userName;
        } catch (e) {
          return null;
        }
      }),
      groupManaged: BaseModel.ComputedProperty(['scope'], function (scope) {
        return scope == 'GROUP';
      }),
      groupId: BaseModel.ComputedProperty(['_links'], function (links) {
        try {
          return links.group.href.split('/').pop();
        } catch (e) {
          return null;
        }
      }),
      groupName: BaseModel.ComputedProperty(['_links'], function (links) {
        try {
          return links.group.name;
        } catch (e) {
          return null;
        }
      }),
      '__oktaStatus__': BaseModel.ComputedProperty(['_embedded'], function (expandedData) {
        try {
          return expandedData.user.status;
        } catch (e) {
          return null;
        }
      }),
      '__oktaStatusLabel__': BaseModel.ComputedProperty(['__oktaStatus__'], function (status) {
        return UserStatus.getLabel(status);
      }),
      '__oktaFirstName__': BaseModel.ComputedProperty(['_embedded'], function (expandedData) {
        try {
          return expandedData.user.profile.firstName;
        } catch (e) {
          return null;
        }
      }),
      '__oktaLastName__': BaseModel.ComputedProperty(['_embedded'], function (expandedData) {
        try {
          return expandedData.user.profile.lastName;
        } catch (e) {
          return null;
        }
      }),
      '__oktaUserName__': BaseModel.ComputedProperty(['_embedded'], function (expandedData) {
        try {
          return expandedData.user.profile.login;
        } catch (e) {
          return null;
        }
      }),
      '__displayUserName__': BaseModel.ComputedProperty(
        ['__oktaUserName__', '__oktaFirstName__', '__oktaLastName__', 'userName'],
        function (oktaUserName, oktaFirstName, oktaLastName, appUserName) {
          try {
            return oktaFirstName && oktaLastName ?
              (oktaFirstName + ' ' + oktaLastName) : (oktaUserName ? oktaUserName : appUserName);
          } catch (e) {
            return null;
          }
        }),
      '__isNew__': true
    },

    parse: function (resp) {
      resp.credentials || (resp.credentials = {});
      if (this.profile) {
        this.profile.set('userName', resp['credentials'].userName);
        this.profile.set(resp.profile);
      }
      try {
        resp['__instanceId__'] = resp['_links'].app.href.split('/').pop();
      } catch (e) {
        /* eslint no-empty: 0 */
      }
      resp['__isNew__'] = false;
      BaseModel.prototype.parse(resp);
      return resp;
    },

    constructor: function (attrs) {
      attrs || (attrs = {});
      attrs.credentials || (attrs.credentials = {});
      this.profile = new BaseModel();
      BaseModel.apply(this, arguments);
    },

    initialize: function (attrs, options) {
      attrs || (attrs = {});
      options || (options = {});
      this.set('__instanceId__', attrs['__instanceId__'] || options['__instanceId__']);
      if (!this.get('__instanceId__')) {
        throw 'Cannot initialize AppUser without an instance id';
      }
    },

    urlRoot: function () {
      return url({instanceId: this.get('__instanceId__')});
    },

    isNew: function () {
      return this.get('__isNew__');
    },

    // both create and update use 'POST'
    sync: function (method, model, options) {
      if (method === 'update') {
        options.method = 'POST';
      }
      return BaseModel.prototype.sync.call(this, method, model, options);
    }

  });

  var AppUsers = BaseCollection.extend({
    model: AppUser,
    initialize: function (models, options) {
      options || (options = {});
      this['__instanceId__'] = options['__instanceId__'];
      if (!this['__instanceId__']) {
        throw 'Cannot initialize AppUsers without an instance id';
      }
      this.expander = new UrlExpander(options.expand);
    },

    url: function () {
      return url({
        instanceId: this['__instanceId__'],
        urlQuery: Util.getUrlQueryString({expand: this.expander.toString() || undefined})
      });
    }
  });

  /**
   * @class AppUser
   *
   * App user(s) for a specific app instance
   */
  return {
    Model: AppUser,
    Collection: AppUsers
  };

});
